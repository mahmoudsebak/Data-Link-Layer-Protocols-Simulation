#ifndef __FRAMEDMESSAGE_M_H
#define __FRAMEDMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include <bitset>
    typedef std::bitset<8> bits;
// }}

/**
 * Class generated from <tt>FramedMessage.msg:25</tt> by nedtool.
 * <pre>
 * packet FramedMessage
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     int seq_num;
 *     int ack_num;
 *     string payload;
 *     bits check_bits;
 * }
 * </pre>
 *
 * FramedMessage_Base is only useful if it gets subclassed, and FramedMessage is derived from it.
 * The minimum code to be written for FramedMessage is the following:
 *
 * <pre>
 * class FramedMessage : public FramedMessage_Base
 * {
 *   private:
 *     void copy(const FramedMessage& other) { ... }
 *   public:
 *     FramedMessage(const char *name=nullptr, short kind=0) : FramedMessage_Base(name,kind) {}
 *     FramedMessage(const FramedMessage& other) : FramedMessage_Base(other) {copy(other);}
 *     FramedMessage& operator=(const FramedMessage& other) {if (this==&other) return *this; FramedMessage_Base::operator=(other); copy(other); return *this;}
 *     virtual FramedMessage *dup() const override {return new FramedMessage(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from FramedMessage_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(FramedMessage)
 * </pre>
 */
class FramedMessage_Base : public ::omnetpp::cPacket
{
  protected:
    int seq_num;
    int ack_num;
    ::omnetpp::opp_string payload;
    bits check_bits;

  private:
    void copy(const FramedMessage_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FramedMessage_Base&);
    // make constructors protected to avoid instantiation
    FramedMessage_Base(const FramedMessage_Base& other);
    // make assignment operator protected to force the user override it
    FramedMessage_Base& operator=(const FramedMessage_Base& other);

  public:
    virtual ~FramedMessage_Base();
    FramedMessage_Base(const char *name=nullptr, short kind=0);
    virtual FramedMessage_Base *dup() const override {return new FramedMessage_Base(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSeq_num() const;
    virtual void setSeq_num(int seq_num);
    virtual int getAck_num() const;
    virtual void setAck_num(int ack_num);
    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);
    virtual bits& getCheck_bits();
    virtual const bits& getCheck_bits() const {return const_cast<FramedMessage_Base*>(this)->getCheck_bits();}
    virtual void setCheck_bits(const bits& check_bits);
};


#endif // ifndef __FRAMEDMESSAGE_M_H
